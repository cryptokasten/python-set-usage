#+TITLE: Python set usage
#+TAGS: cryptokasten, python, set
#+PROPERTY: header-args :session *shell python-set-usage* :results replace code
#+OPTIONS: ^:nil

[[https://github.com/cryptokasten][file:https://img.shields.io/badge/dynamic/json.svg?url=https://api.github.com/users/cryptokasten&label=Cryptokasten&query=$.public_repos]]

Python set usage examples.

** Development environment

Base docker image: [[https://hub.docker.com/_/python/][python:3.9.0-buster]].

#+BEGIN_SRC sh :results silent raw
docker pull python:3.9.0-buster
#+END_SRC

#+BEGIN_SRC sh :results silent raw
docker run --rm -it \
  -v $TMPDIR:$TMPDIR  \
  python:3.9.0-buster python
#+END_SRC

** Code
*** Create set
**** Use the type constructor

#+BEGIN_SRC python :results replace code :exports both
s = set()
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python 
set()
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
s = set("abcdef")
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{'b', 'a', 'c', 'f', 'd', 'e'}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
s = set(["a", "ab", "abc"])
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{'abc', 'ab', 'a'}
#+END_SRC

**** Use a set comprehension

#+BEGIN_SRC python :results replace code :exports both
{c for c in 'abracadabra' if c not in 'abc'}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{'r', 'd'}
#+END_SRC

**** Use a comma-separated list of elements within braces

#+BEGIN_SRC python :results replace code :exports both
s = {1, 2, 3}
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 2, 3}
#+END_SRC

**** Don't use short form for create empty sets!

#+BEGIN_SRC python :results replace code :exports both
d = {}
d, type(d)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
({}, <class 'dict'>)
#+END_SRC

**** Create from list

#+BEGIN_SRC python :results replace code :exports both
lst = [1, 2, 3]
s = set(lst)
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 2, 3}
#+END_SRC

*** Create frozenset

#+BEGIN_SRC python :results replace code :exports both
s = frozenset(s)
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
frozenset({'abc', 'ab', 'a'})
#+END_SRC

*** View type

#+BEGIN_SRC python :results replace code :exports both
type(s)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
<class 'frozenset'>
#+END_SRC

*** Number of elements in set

#+BEGIN_SRC python :results replace code :exports both
len({1, 2, 3})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
3
#+END_SRC

*** Test membership

**** In

#+BEGIN_SRC python :results replace code :exports both
1 in {1, 2, 3}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
True
#+END_SRC

**** Not in

#+BEGIN_SRC python :results replace code :exports both
99 not in {1, 2, 3}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
True
#+END_SRC

*** Test is disjoint

Sets are disjoint if and only if their intersection is the empty set.

#+BEGIN_SRC python :results replace code :exports both
{1, 2, 3}.isdisjoint({6})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
True
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
{1, 2, 3}.isdisjoint({1})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
False
#+END_SRC

*** Subset test

#+BEGIN_SRC python :results replace code :exports both
{1}.issubset({1, 2, 3})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
True
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
{1, 2} <= {1, 2}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
True
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
{1, 2} < {1, 2}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
False
#+END_SRC

*** Test superset

#+BEGIN_SRC python :results replace code :exports both
{1, 2, 3}.issuperset({1})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
True
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
{1, 2} <= {1, 2}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
True
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
{1, 2} < {1, 2}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
False
#+END_SRC

*** Union

#+BEGIN_SRC python :results replace code :exports both
{1, 2} | {2, 3} | {3, 4}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 2, 3, 4}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
{1, 2}.union({2, 3}, {3, 4})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 2, 3, 4}
#+END_SRC

*** Intersection

#+BEGIN_SRC python :results replace code :exports both
{1, 2}.intersection({2, 3}, {1, 2, 3, 4})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{2}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
{1, 2} & {2, 3} & {1, 2, 3, 4}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{2}
#+END_SRC

*** Difference

#+BEGIN_SRC python :results replace code :exports both
{1, 2, 3, 4}.difference({2, 3}, {1})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{4}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
{1, 2, 3, 4} - {2, 3} - {1}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{4}
#+END_SRC

*** Symmetric difference

#+BEGIN_SRC python :results replace code :exports both
{1, 2}.symmetric_difference({2, 3})
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 3}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
{1, 2} ^ {2, 3}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 3}
#+END_SRC

*** Copy

#+BEGIN_SRC python
a = {1, 2, 3}
b = a.copy()
b.add()
#+END_SRC

*** There are no ordering function

#+BEGIN_SRC python :results replace code :exports both
{1, 2} < {3, 4}, {1, 2} == {3, 4}, {1, 2} > {3, 4}
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
(False, False, False)
#+END_SRC

*** Update

#+BEGIN_SRC python :results replace code :exports both
s = set()
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
set()
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
s |= {1} | {1, 2}
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 2}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
s.update({3, 4})
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 2, 3, 4}
#+END_SRC

*** Intersection update

#+BEGIN_SRC python :results replace code :exports both
s = set({1, 2, 3})
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 2, 3}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
s &= {1} & {1, 2}
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
s.intersection_update({1})
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1}
#+END_SRC

*** Difference update

#+BEGIN_SRC python :results replace code :exports both
s = set({1, 2, 3})
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 2, 3}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
s -= {1} | {1, 2}
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{3}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
s.difference_update({3})
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
set()
#+END_SRC

*** Symmetric difference update

#+BEGIN_SRC python :results replace code :exports both
s = set({1, 2, 3})
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 2, 3}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
s ^= {1}
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{2, 3}
#+END_SRC

-----

#+BEGIN_SRC python :results replace code :exports both
s.symmetric_difference_update({1})
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{2, 3, 1}
#+END_SRC

*** Add

#+BEGIN_SRC python :results replace code :exports both
s = {1, 2, 3}
s.add(4)
s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
{1, 2, 3, 4}
#+END_SRC

*** Remove

#+BEGIN_SRC python :results replace code :exports both
s = {1, 2, 3}
s.remove(3), s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
(None, {1, 2})
#+END_SRC

*** Discard

#+BEGIN_SRC python :results replace code :exports both
s = {1, 2, 3}
s.discard(4), s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
(None, {1, 2, 3})
#+END_SRC

*** Pop

#+BEGIN_SRC python :results replace code :exports both
s = {1, 2, 3}
s.pop(), s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
(1, {2, 3})
#+END_SRC

*** Clear

#+BEGIN_SRC python :results replace code :exports both
s = {1, 2, 3}
s.clear(), s
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
(None, set())
#+END_SRC

** Resources

1. https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
